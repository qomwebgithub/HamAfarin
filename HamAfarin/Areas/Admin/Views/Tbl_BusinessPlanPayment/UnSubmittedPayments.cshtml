@model IEnumerable<DataLayer.Tbl_BusinessPlanPayment>
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "پرداخت های تایید نشده";
}

<h2>@ViewBag.Title</h2>

<div class="form-row">
    <div class="form-group col-md-3">
        <label class="sr-only" for="startDate">تاریخ شروع</label>
        <div class="input-group" style="direction:ltr">
            <div class="input-group-prepend">
                <button class="btn btn-primary" id="startDateYMD" type="button">انتخاب</button>
            </div>
            <input id="startDate" type="text" class="form-control" name="startDate" placeholder="تاریخ شروع" />
        </div>
    </div>
    <div class="form-group col-md-3">
        <label class="sr-only" for="endDate">تاریخ پایان</label>
        <div class="input-group" style="direction:ltr">
            <div class="input-group-prepend">
                <button class="btn btn-primary" id="endDateYMD" type="button">انتخاب</button>
            </div>
            <input id="endDate" type="text" class="form-control" name="endDate" placeholder="تاریخ پایان" />
        </div>
    </div>
    <div class="form-group col-md-3">
        <a class="btn btn-primary text-white mb-2" onclick="excelReport()">گزارش</a>
    </div>
</div>
<iframe id="downloadIframe" style="display:none;"></iframe>

@(Html.Kendo().Grid(Model)
      .Name("Grid")
      .Columns(columns =>
          {
                        columns.Bound(model => model.IsPaid);
columns.Bound(model => model.PaidDateTime).Template(
        @<text>
            @string.Format("{0:yy/MM/dd HH:mm}", item.PaidDateTime)
        </text>

).Width(70);
columns.Bound(model => model.TransactionPaymentCode);
columns.Bound(item => item.PaymentType_id).Filterable(false).Groupable(false)
    .Template(@<text>
        @if (item.PaymentType_id == 2)
        {
            <p>درگاه</p>
        }
        else if (item.PaymentType_id == 3)
        {
            <p>فیش</p>
        }
    </text>);
columns.Bound(model => model.PaymentPrice).Format("{0:n0}");
columns.Bound(model => model.Tbl_Users.UserName);
columns.Bound(model => model.Tbl_BussinessPlans.Title);
            columns.Bound(item => @item.PaymentID).Title("دستورات").Filterable(false).Groupable(false)
                    .Template(@<text>
                @Html.ActionLink("جزییات", "Details", new { id = @item.PaymentID }, new { @class = "k-button k-button-icontext k-grid-Edit" })
                @Html.ActionLink("حذف", "Delete", new { id = @item.PaymentID }, new { @class = "k-button k-button-icontext k-grid-Delete" })
                    </text>).Width(200);
})
.ToolBar(toolbar =>
{
toolbar.Custom().Action("Create", "Tbl_BusinessPlanPayment").Text("افزودن");
}
)
.Groupable()
.Pageable()
.Sortable()
.Filterable()
.DataSource(dataSource => dataSource
.Server()

.Model(model => model.Id(item => item.PaymentID))
)
)

@section scripts{
    <script>
        function excelReport() {
            const start = $('#startDate').val();
            const end = $('#endDate').val();
            const url = '/Admin/Tbl_BusinessPlanPayment/ExcelReport?startDate=' + start + '&endDate=' + end;
            document.getElementById('downloadIframe').src = url;
        }
        $("#startDateYMD").MdPersianDateTimePicker({
            targetTextSelector: "#startDate",
            textFormat: "yyyy-MM-dd",
            isGregorian: false,
            modalMode: false,
            englishNumber: false,
        });
        $("#endDateYMD").MdPersianDateTimePicker({
            targetTextSelector: "#endDate",
            textFormat: "yyyy-MM-dd",
            isGregorian: false,
            modalMode: false,
            englishNumber: false,
        });
    </script>
}